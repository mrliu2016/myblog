<?php

namespace app\common\models;

use yii\db\ActiveRecord;
use Yii;

class Order extends ActiveRecord
{
    public static function tableName()
    {
        return 't_order'; // TODO: Change the autogenerated stub
    }

    //购买礼物
    public static function create($roomId, $giftId, $userId, $userIdReceive, $price, $num)
    {
        $model = new self();
        $model->roomId = $roomId;
        $model->giftId = $giftId;
        $model->totalPrice = intval($price) * intval($num);
        $model->price = $price;
        $model->priceReal = $price;
        $model->num = $num;
        $model->userId = $userId;
        $model->userIdReceive = $userIdReceive;
        $model->created = time();
        $model->updated = time();
        $model->save();
        return $model;
    }

    public static function queryInfo($params)
    {
        $offset = 0;
        if (!empty($params['page']) && !empty($params['defaultPageSize'])) {
            $offset = ($params['page'] - 1) * $params['defaultPageSize'];
        }
        $find = static::find();
        $find = self::buildParams($find, $params);
        return $find->asArray()->offset($offset)->limit($params['defaultPageSize'])->all();
    }

    /**
     * 查询榜单信息
     *
     * @param $params
     * @return mixed
     */
    public static function queryContributionInfo($params)
    {
        $offset = 0;
        if (!empty($params['page']) && !empty($params['defaultPageSize'])) {
            $offset = ($params['page'] - 1) * $params['defaultPageSize'];
        }
        $find = static::find();
        $find = self::buildParams($find, $params);
        $result = $find->asArray()
            ->select('sum(`price`) as totalPrice,userId,userIdReceive')
            ->orderBy('totalPrice desc')
            ->offset($offset)
            ->limit($params['defaultPageSize'])
            ->groupBy('userId')
            ->all();
        return $result;
    }

    public static function queryInfoNum($params)
    {
        $find = static::find();
        $find = self::buildParams($find, $params);
        return $find->count();
    }

    /**
     * 绑定查询参数
     *
     * @param $find
     * @param $params
     * @return mixed
     */
    private static function buildParams($find, $params)
    {
        if (!empty($params['id'])) {
            $find->andWhere('id=' . $params['id']);
        }
        if (isset($params['userId'])) {
            $find->andWhere('userIdReceive = ' . $params['userId']);
        }
        if (isset($params['type'])) {
            $currentTime = $_SERVER['REQUEST_TIME'];
            switch ($params['type']) {
                case 0: // 日榜单
                    $start = strtotime(date('Y-m-d', $currentTime));
                    $end = strtotime(date('Y-m-d', strtotime('+1 day', $currentTime)));
                    $find->andWhere('created >= ' . $start . ' and created < ' . $end);
                    break;
                case 1: // 周榜单
                    $start = strtotime(date('Y-m-d', strtotime("this week Monday", $currentTime)));
                    $end   = strtotime(date('Y-m-d', strtotime("this week Sunday", $currentTime))) + 24 * 3600 - 1;
                    $find->andWhere('created >= ' . $start . ' and created < ' . $end);
                    break;
                case 2: // 总榜单
                    $find->andWhere('userIdReceive = ' . $params['userId']);
                    break;
            }
        }
        return $find;
    }

    /**
     * @param string $sql
     * @return int
     * @throws \yii\db\Exception
     */
    public static function updateBySqlCondition($sql = '')
    {
        $connection = Yii::$app->db;
        $command = $connection->createCommand($sql);
        return $command->execute();
    }

    /**
     * @param string $sql
     * @return array
     * @throws \yii\db\Exception
     */
    public static function queryBySQLCondition($sql = '',$flag = true)
    {
        $connection = Yii::$app->db;
        $command = $connection->createCommand($sql);
        if($flag){
            return $command->queryAll();
        }
        return $command->queryOne();
    }

    /**
     * 收到礼物
     */
    public static function queryReceiveGiftList($params){
        $offset = 0;
        if (!empty($params['page']) && !empty($params['defaultPageSize'])) {
            $offset = ($params['page'] - 1) * $params['defaultPageSize'];
        }
        $find = static::find();
        $find = self::buildParams($find, $params);
        $result = $find->select('giftId,num,userId,userIdReceive')
            ->asArray()
            ->offset($offset)
            ->limit($params['defaultPageSize'])
            ->all();
        return $result;
    }
    /**
     * 送出礼物
     */
    public static function queryGiveGiftList($params){
        $offset = 0;
        if (!empty($params['page']) && !empty($params['defaultPageSize'])) {
            $offset = ($params['page'] - 1) * $params['defaultPageSize'];
        }
        $find = static::find();
        if (isset($params['userId'])) {
            $find->andWhere('userId = ' . $params['userId']);
        }
        $result = $find->select('giftId,num,userId,userIdReceive')
            ->asArray()
            ->offset($offset)
            ->limit($params['defaultPageSize'])
            ->all();
        return $result;
    }

    //根据类型查询
    public static function queryInfoNumByUserId($type,$userId){
        $find = static::find();
        if($type == 1){
            $find->andWhere('userIdReceive = ' . $userId);
        }
        else if($type == 2){
            $find->andWhere('userId = ' . $userId);
        }
        return $find->count();
    }

    //收到礼物/币  送出礼物/豆
    public static function queryReceiveGiftByUserId($userId,$flag = true){
        $sql = '';
        if($flag){
            $sql = "SELECT SUM(`totalPrice`) AS  totalPrice FROM `".static ::tableName()."` WHERE `userId`={$userId}";
        }
        else {
            $sql = "SELECT SUM(`totalPrice`) AS  totalPrice FROM `".static ::tableName()."` WHERE `userIdReceive`={$userId}";
        }
        $result = static ::queryBySQLCondition($sql,false);
        return $result;
    }

    //机器人插入 收到礼物 送出礼物
    public static function insertRobotGift($userId,$totalPrice,$flag = true){

        $model = new self();
        if($flag){//收到礼物
            $model->userIdReceive = $userId;
        }
        else{//送出礼物
            $model->userId = $userId;
        }
        $model->totalPrice = $totalPrice;
        $model->created = time();
        $model->updated = time();
        $model->save();
    }
}