<?php

namespace app\common\models;

use app\common\components\WeiXinPay;
use app\common\services\Constants;
use yii\db\ActiveRecord;

class Order extends ActiveRecord
{
    public static function tableName()
    {
        return 't_order'; // TODO: Change the autogenerated stub
    }

    /**
     * @param array $params
     * @param string $payType
     * @return array
     */
    public static function weiXinPay($params = [],$payType = Constants::WEI_XIN_APP_TRADE)
    {
        $result = [];
        $orderId = static::orderIdAlias();
        $user['openId'] = 'o0P9800xU2o5yUQskZ2frc_nM7C8';
        $application['wxAppId'] = 'wxc157967034c8f60b';
        $application['wxMchId'] = '1487372672';
        $application['wxPayKey'] = '49411f78bf21870f989aa1ace1cc0d0e';
        $taskResult['name'] = '测试支付';
        switch ($payType){
            case Constants::WEI_XIN_APP_TRADE:
                $application['wxAppId'] = 'wx70a3358e75e061f7';
                $application['wxMchId'] = '1440798702';
                $application['wxPayKey'] = 'QxKjAppPw1357924QxKjAppPw1357924';
                $result = WeiXinPay::weiXinAppPay($user['openId'], $orderId, $params['price'], $application['wxAppId'],
                    $application['wxMchId'], $application['wxPayKey'], $taskResult['name'], $taskResult['name'], $taskResult['name']);
                break;
            case Constants::WEI_XIN_JS_TRADE:
                $result = WeiXinPay::weiXinJsPay($user['openId'], $orderId, $params['price'], $application['wxAppId'],
                    $application['wxMchId'], $application['wxPayKey'], $taskResult['name'], $taskResult['name'], $taskResult['name']);
                break;
        }
        return [
            'code' => ($result['code'] == Constants::CODE_FAILED) ? Constants::CODE_FAILED : Constants::CODE_SUCCESS,
            'message' => $result['message'],
            'data' => ($result['code'] == Constants::CODE_FAILED) ? [] : [
                'orderId' => $orderId,
                'prepayId' => $result['data']
            ]
        ];
    }

    /**
     * @param $taskId
     * @param $unionId
     * @param int $orderId
     * @param int $priceReal
     * @param string $payType
     * @return array|bool
     */
    public static function createTaskOrderId($taskId, $unionId, $orderId = 0, $priceReal = 0, $payType = Constants::PAY_TYPE_WEI_XIN)
    {
        $model = static::findOne(['taskId' => $taskId, 'unionId' => $unionId]);
        if (empty($model)) {
            return false;
        }
        switch ($model->payStatus) {
            case Constants::TASK_PAY_STATUS_SUCCESS:
                return [
                    'code' => Constants::CODE_FAILED,
                    'msg' => '已支付!'
                ];
                break;
        }
        switch ($payType) {
            case Constants::PAY_TYPE_COUPON:
                $model->priceCoupon = $priceReal;
                break;
        }
        $model->orderId = $orderId;
        $model->payType = $payType;
        $model->priceReal = $priceReal;
        $result = $model->save();
        return [
            'code' => $result ? Constants::CODE_SUCCESS : Constants::CODE_FAILED,
            'msg' => ''
        ];
    }

    /**
     * @param $orderId
     * @param $transactionId
     * @param $timeEnd
     * @param int $payStatus
     * @return bool
     */
    public static function updateTaskMember($orderId, $transactionId, $timeEnd, $payStatus = Constants::TASK_PAY_STATUS_CREATE)
    {
        $model = static::findOne(['orderId' => $orderId]);
        if (empty($model)) {
            return false;
        }
        if (!empty($transactionId)) {
            $model->transactionId = $transactionId;
        }
        $model->payStatus = $payStatus;
        $model->updated = time();
        $model->save();
        Task::updateTaskRealCoupon($model->taskId, $model->priceReal);
        RedisClient::getInstance()->lpush(Constants::PAY_SUCCESS_JOIN_TASK, $model->id);
        return $model->taskId;
    }

    public static function h5UpdateTaskMember($orderId, $transactionId, $timeEnd, $payStatus = Constants::TASK_PAY_STATUS_CREATE)
    {
        $model = static::findOne(['orderId' => $orderId]);
        if (empty($model)) {
            return false;
        }
        if (intval($model->payStatus) == Constants::TASK_PAY_STATUS_SUCCESS) {
            return true;
        }
        if (!empty($transactionId)) {
            $model->transactionId = $transactionId;
        }
        $model->payStatus = $payStatus;
        $model->updated = time();
        $model->save();
        return $model->taskId;
    }

    /**
     * 查询订单
     * @param array $params
     * @return array
     */
    public static function queryOrder($params = [])
    {
        $application = Application::queryById($params['appId']);
        if (isset($params['transaction_id']) && !empty($params['transaction_id'])) {
            return WeiXinPay::weiXinOrderQuery($params['transaction_id'], $application['wxAppId'],
                $application['wxMchId'], $application['wxPayKey'], false);
        }
        if (isset($params['out_trade_no']) && !empty($params['out_trade_no'])) {
            return WeiXinPay::weiXinOrderQuery($params['out_trade_no'], $application['wxAppId'],
                $application['wxMchId'], $application['wxPayKey'], true);
        }
    }

    /**
     * 订单别名
     *
     * @return string
     */
    private static function orderIdAlias()
    {
        return time() . rand(10000, 99999);
    }
}