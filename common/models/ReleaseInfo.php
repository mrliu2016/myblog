<?php

namespace app\common\models;

/**
 * Class ReleaseInfo
 * @package app\common\models
 * 发布消息表
 */
class ReleaseInfo extends Base
{
    public static function tableName()
    {
        return 't_release_info'; // TODO: Change the autogenerated stub
    }

    /**
     * 绑定参数
     */
    private static function bindParams($find, $params)
    {
        if (!empty($params['categoryId'])) {
            $find->andWhere('categoryId="' . $params['categoryId'] . '"');//分类
        }
        if (!empty($params['content'])) {
            $find->andWhere('content like "%' . $params['content'] . '%"');
        }

        if (!empty($params['startTime'])) {
            $find->andWhere('created>=' . $params['startTime']);
        }
        if (!empty($params['endTime'])) {
            $find->andWhere('created<=' . $params['endTime']);
        }

        if (isset($params['top'])) {
            $find->andWhere('top=' . $params['top']);
        }

        if (isset($params['isDelete'])) {
            $find->andWhere('isDelete=0' . $params['isDelete']);
        } else {
            $find->andWhere('isDelete=0');
        }
        return $find;
    }

    /**
     * 发布消息列表
     */
    public static function queryList($params)
    {
        $offset = 0;
        if (!empty($params['page']) && !empty($params['pageSize'])) {
            $offset = ($params['page'] - 1) * $params['pageSize'];
        }
        $find = static::find();
        $find = static::bindParams($find, $params);
        $result = $find->select('id,content,top,categoryId,created')
            ->offset($offset)
            ->orderBy('weight desc,created desc')
            ->limit($params['pageSize'])
            ->asArray()
            ->all();
        if (!empty($result)) {

            $categoryMap = Category::categoryMap();
            foreach ($result as $key => &$val) {
                $val['created'] = date('m-d H:i', $val['created']);
                $val['category'] = isset($categoryMap[$val['categoryId']]) ? $categoryMap[$val['categoryId']] : '其他';

            }
        }
        return $result;
    }

    /**
     * 总数
     */
    public static function count($params)
    {
        $find = static::find();
        $find = static::bindParams($find, $params);
        return $find->count();
    }

    /**
     * 添加发布信息
     * top 可设置脚本定时更新
     */
    public static function insertInfo($params, $valid_time = 0, $top = 0)
    {
        $model = new self();
        $model->content = $params['content'];
        $model->weight = isset($params['weight']) ? $params['weight'] : 0;
        $model->top = $top;
        $model->valid_time = $valid_time;
        $model->categoryId = empty($params['categoryId']) ? 0 : $params['categoryId'];
        $model->created = $_SERVER['REQUEST_TIME'];
        $model->updated = $_SERVER['REQUEST_TIME'];
        return $model->save();
    }

    /**
     * 查询需要更新状态的信息
     */
    public static function queryStickInfo()
    {
        $find = static::find();
        $find->andWhere('isDelete=0');
        $find->andWhere('top=1');
        $result = $find->select('id,valid_time')
            ->asArray()
            ->all();
        return $result;
    }

    /**
     * 更新置顶状态
     * 异步更新
     */
    public static function updateStickStatus($ids)
    {
        $sql = "UPDATE " . static::tableName() . " set weight=0,top=1 WHERE id in (" . $ids . ")";
        return static::updateBySqlCondition($sql);
    }

    /**
     * 删除
     */
    public static function delOrUndoInfo($id, $isDelete = 1)
    {
        $model = static::find()->where('id=' . $id)->one();
        if (!empty($model)) {
            $model->isDelete = $isDelete;
            $model->updated = $_SERVER['REQUEST_TIME'];
            return $model->save();
        }
        return 0;
    }

    /**
     * 根据id查询
     */
    public static function queryOne($id)
    {
        return static::find()
            ->where('id=' . $id)
            ->asArray()
            ->one();
    }

    /**
     * 编辑
     */
    public static function edit($id, $content)
    {
        $model = static::find()->where('id=' . $id)->one();
        if (!empty($model)) {
            $model->content = $content;
            $model->updated = $_SERVER['REQUEST_TIME'];
            return $model->save();
        }
        return 0;
    }

    /**
     * 发布信息
     */
    public static function release($params)
    {
        $top = isset($params['top']) ? $params['top'] : 0;
        $model = new self();
        $model->content = trim($params['content']);
        $model->weight = isset($params['weight']) ? $params['weight'] : 0;
        $model->top = $top;
        $model->valid_time = ($top == 0) ? 0 : $_SERVER['REQUEST_TIME'] + $params['time'] * 86400;
        $model->categoryId = isset($params['categoryId']) ? $params['categoryId'] : 0;
        $model->isDelete = 0;
        $model->created = $_SERVER['REQUEST_TIME'];
        $model->updated = $_SERVER['REQUEST_TIME'];
        return $model->save();
    }

    /**
     * 统计消息总数
     */
    public static function total($top = 0)
    {
        $find = static::find();
        $find->andWhere('isDelete=0');
        if (!empty($top)) {
            $find->andWhere('top=' . $top);//置顶
        }
        return $find->count();
    }

    /**
     * 按照日期统计消息总数 - 最近30天
     */
    public static function queryInfoCountLast30Days($created = 0)
    {
        $find = static::find();
        $find->andWhere('isDelete=0');
        $find->andWhere('created>=' . $created);
        $result = $find->select(['DATE_FORMAT(FROM_UNIXTIME(created), \'%Y-%m-%d\') logTime','count(1) count'])
            ->groupBy('logTime')
            ->orderBy('logTime asc')
            ->asArray()
            ->all();
        return $result;
    }
}