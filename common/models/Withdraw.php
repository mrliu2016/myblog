<?php

namespace app\common\models;

use app\common\components\WeiXinApi;
use app\common\components\WeiXinPay;
use app\common\services\Constants;
use yii\db\ActiveRecord;

class Withdraw extends ActiveRecord
{
    public static function tableName()
    {
        return 't_withdraw'; // TODO: Change the autogenerated stub
    }

    /**
     * @param $params
     * @return array
     */
    public static function applyWithdraw($params)
    {
        $user = User::queryById($params['userId']);
        if (empty($user)) {
            return ['code' => Constants::CODE_FAILED, 'message' => '用户不存在!'];
        }
        if ($user['balance'] < $params['price'] * Constants::CENT) {
            return ['code' => Constants::CODE_FAILED, 'message' => '余额不足!'];
        }
        $model = new Withdraw();
        $model->userId = $params['userId'];
        $model->name = $params['name'];
        $model->idCard = $params['idCard'];
        $model->price = $params['price'] * Constants::CENT;
        $model->created = time();
        $model->updated = time();
        $result = $model->save();
        if ($result) {
            $sql = 'update ' . User::tableName()
                . ' set balance = balance - ' . $params['price'] * Constants::CENT
                . ' where id = ' . $params['userId'];
            User::updateBySqlCondition($sql);
            return ['code' => Constants::CODE_SUCCESS, 'message' => '提现申请成功!', 'data' => []];
        } else {
            return ['code' => Constants::CODE_FAILED, 'message' => '提现申请失败!'];
        }
    }

    public static function agreeWithdraw($params)
    {
        $application = [];
        $withdrawUser = [];
        $user = [];
        $withdrawDetail = [];
        $result = WeiXinPay::transfers($application['wxAppId'], $application['wxMchId'], $application['wxPayKey'], $withdrawDetail['id'],
            $user['openId'], $withdrawUser['name'], intval($withdrawDetail['price']),
            isset($params['desc']) ? $params['desc'] : '企业付款', $application['sslCert'], $application['sslKey']);
    }
    public static function queryInfo($params)
    {
        $offset = 0;
        if (!empty($params['page']) && !empty($params['defaultPageSize'])) {
            $offset = ($params['page'] - 1) * $params['defaultPageSize'];
        }
        $find = static::find();
        $find = self::buildParams($find, $params);
        return $find->asArray()->offset($offset)->limit($params['defaultPageSize'])->all();
    }

    public static function queryInfoNum($params)
    {
        $find = static::find();
        $find = self::buildParams($find, $params);
        return $find->count();
    }

    private static function buildParams($find, $params)
    {
        if (!empty($params['userId'])) {
            $find->andWhere('userId=' . $params['userId']);
        }
        return $find;
    }
}