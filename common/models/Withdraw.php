<?php

namespace app\common\models;

use app\common\components\WeiXinApi;
use app\common\components\WeiXinPay;
use app\common\services\Constants;
use yii\db\ActiveRecord;
use Yii;

class Withdraw extends ActiveRecord
{
    private static $status = [
        0 => '未处理',
        1 => '通过',
        -1 => '拒绝',
        -2 => '失败',
        2 => '成功'
    ];

    const ZERO_TIME = '00:00:00';
    const NIGHT_TIME = '23:59:59';

    public static function tableName()
    {
        return 't_withdraw'; // TODO: Change the autogenerated stub
    }

    public static function queryById($id)
    {
        return static::find()->where(['id' => $id])->asArray()->one();
    }

    /**
     * @param $params
     * @return array
     */
    public static function applyWithdraw($params)
    {
        $user = User::queryById($params['userId']);
        if (empty($user)) {
            return ['code' => Constants::CODE_FAILED, 'message' => '用户不存在!'];
        }
        if ($user['balance'] < $params['price'] * Constants::CENT) {
            return ['code' => Constants::CODE_FAILED, 'message' => '余额不足!'];
        }
        $model = new Withdraw();
        $model->userId = $params['userId'];
        $model->name = $params['name'];
        $model->idCard = $params['idCard'];
        $model->price = $params['price'] * Constants::CENT;
        $model->created = time();
        $model->updated = time();
        $result = $model->save();
        if ($result) {
            $sql = 'update ' . User::tableName()
                . ' set balance = balance - ' . $params['price'] * Constants::CENT
                . ' where id = ' . $params['userId'];
            User::updateBySqlCondition($sql);
            return ['code' => Constants::CODE_SUCCESS, 'message' => '提现申请成功!', 'data' => []];
        } else {
            return ['code' => Constants::CODE_FAILED, 'message' => '提现申请失败!'];
        }
    }

    /**
     * 同意提现
     *
     * @param array $params
     * @return array
     */
    public static function agreeWithdraw($params = [])
    {
        $withdraw = Withdraw::queryById($params['id']);
        $application = Yii::$app->params['app'];
        if (!empty($application['sslCert']) && !empty($application['sslKey'])
            && ($withdraw['status'] == Constants::WITHDRAW_STATUS_APPLY)) {
            $user = User::queryById($params['userId']);
            $result = WeiXinPay::transfers($application['wxAppId'], $application['wxMchId'], $application['wxPayKey'], $withdraw['id'],
                $user['openId'], $withdraw['name'], intval($withdraw['price']),
                isset($params['desc']) ? $params['desc'] : '企业付款', $application['sslCert'], $application['sslKey']);
            ll($result, __FUNCTION__ . '.log');
            if (!empty($result)) {
                if ($result['return_code'] == 'SUCCESS' && $result['result_code'] == 'SUCCESS') {
                    static::updateUserAndWithdrawSuccess($withdraw['id'], $result['payment_no'], $result['payment_time']);
                    return ['code' => Constants::CODE_SUCCESS, 'msg' => '提现成功!', 'data' => $result];
                }
            }
            static::updateUserAndWithdrawFailed($user['id'], $withdraw['price'], $withdraw['id'], $result['err_code'], $result['err_code_des']);
            return ['code' => Constants::CODE_FAILED, 'msg' => '提现失败!'];
        } else {
            return [
                'code' => Constants::CODE_FAILED,
                'msg' => '未开启提现功能!'
            ];
        }
    }

    public static function withdrawDetailRule($params)
    {
        $user = User::queryById($params['userId']);
        return [
            'balance' => $user['balance'] / Constants::CENT, // 可提现金额
        ];
    }

    /**
     * 拒绝提现
     * @param array $params
     */
    public static function refuseWithdraw($params = [])
    {
        $withdraw = static::queryById($params['id']);
        // 退回提现金额
        $sql = 'update ' . User::tableName() . ' set balance = balance + ' . intval($withdraw['price'])
            . ' where id = ' . $params['userId'];
        static::updateBySqlCondition($sql);
        // 提现状态
        $sql = 'update ' . static::tableName() . ' set status = \'' . Constants::WITHDRAW_STATUS_REFUSE . '\''
            . ',remark = \'' . $params['remark'] . '\''
            . ' where id = ' . $withdraw['id'];
        static::updateBySqlCondition($sql);
    }

    private static function updateUserAndWithdrawSuccess($withdrawId, $paymentNo, $paymentTime = '')
    {
        // 提现状态
        $sql = 'update ' . static::tableName() . ' set status = \'' . Constants::WITHDRAW_STATUS_COMPLETE . '\''
        . ',transactionId = \'' . $paymentNo . '\''
        . ',paymentTime = \'' . !empty($paymentTime) ? strtotime($paymentTime) : time() . '\''
            . ' where id = ' . $withdrawId;
        static::updateBySqlCondition($sql);
    }

    private static function updateUserAndWithdrawFailed($userId, $price, $withdrawId, $errorCode, $errorCodeDescription)
    {
        // 退回提现金额
        $sql = 'update ' . User::tableName() . ' set balance = balance + ' . intval($price)
            . ' where id = \'' . $userId . '\'';
        static::updateBySqlCondition($sql);
        // 提现状态
        $sql = 'update ' . static::tableName() . ' set status = \'' . Constants::WITHDRAW_STATUS_FAILED . '\''
            . ',errorCode = \'' . $errorCode . '\''
            . ',errorCodeDescription = \'' . $errorCodeDescription . '\''
            . ' where id = ' . $withdrawId;
        static::updateBySqlCondition($sql);
    }

    /**
     * 根据sql更新表数据
     * @param string $sql
     * @return int
     */
    public static function updateBySqlCondition($sql = '')
    {
        $connection = Yii::$app->db;
        $command = $connection->createCommand($sql);
        return $command->execute();
    }

    public static function queryBySqlCondition($sql = '')
    {
        $connection = Yii::$app->db;
        $command = $connection->createCommand($sql);
        return $command->queryAll();
    }

    public static function queryInfo($params)
    {
        $offset = 0;
        if (!empty($params['page']) && !empty($params['defaultPageSize'])) {
            $offset = ($params['page'] - 1) * $params['defaultPageSize'];
        }
        $find = static::find();
        $find = self::buildParams($find, $params);
        $result = $find->asArray()->offset($offset)->limit($params['defaultPageSize'])->all();
        foreach ($result as $key => $value) {
            $result[$key]['price'] = $value['price'] / Constants::CENT;
            $result[$key]['status'] = self::$status[$value['status']];
            $result[$key]['orderPayTime'] = !empty($value['orderPayTime'])
                ? date('Y-m-d H:i:s', strtotime($value['orderPayTime'])) : '';
        }
        return $result;
    }

    public static function queryInfoNum($params)
    {
        $find = static::find();
        $find = self::buildParams($find, $params);
        return $find->count();
    }

    private static function buildParams($find, $params)
    {
        if (!empty($params['userId'])) {
            $find->andWhere(['userId' => $params['userId']]);
        }
        if (!empty($params['queryTime'])) {
            $find->andWhere('paymentTime >= ' . strtotime($params['queryTime'] . ' ' . self::ZERO_TIME));
            $find->andWhere('paymentTime <= ' . strtotime($params['queryTime'] . ' ' . self::NIGHT_TIME));
        }
        return $find;
    }
}