<?php

namespace app\api\controllers;

use app\common\models\Category;
use app\common\models\ReleaseInfo;
use app\common\models\StickyCode;
use app\common\models\UserInfo;
use app\common\services\Constants;

class IndexController extends BaseController
{

    public function actionError()
    {
        header("HTTP/1.1 404 Not Found");
        exit;
    }

    public function runAction($id, $params = [])
    {
        try {
            return parent::runAction($id, $params); // TODO: Change the autogenerated stub
        } catch (\Exception $e) {
            ll($e->getMessage(), 'params.log');
            ll('请求参数:' . json_encode($params, JSON_UNESCAPED_SLASHES), 'exception.log');
            $this->jsonReturnError(Constants::CODE_FAILED, '异常错误');
        }
    }

    const PAGE = 1;

    /**
     * @param page:页码
     * @param pageSize:条数
     * @param time:传30 代表请求30天以内的数据
     */
    public function actionMainList()
    {
        $params = $_GET ?: $_POST;
        $params['page'] = empty($params['page']) ? self::PAGE : $params['page'];
        $params['pageSize'] = empty($params['pageSize']) ? self::PAGE_SIZE : $params['pageSize'];

        $list = ReleaseInfo::queryList($params);
        $count = ReleaseInfo::count($params);

        $result = [];
        $result['list'] = $list;
        $result['count'] = $count;
        $this->jsonReturnSuccess(Constants::CODE_SUCCESS, 'success', $result);
    }

    /**
     * sendMessage    time： 发布时间    detail 发布内容      stick ：置顶码
     * code:置顶码
     * content:发布的内容
     */
    public function actionSendMessage()
    {
        $params = $_GET ?: $_POST;
        if (empty($params['content'])) {
            $this->jsonReturnError(Constants::CODE_FAILED, 'lose of parameter');
        }

        $valid_time = 0;
        $top = 0;
        if (!empty($params['code'])) {
            $stickyCode = StickyCode::getWeightByCode($params['code']);
            if (empty($stickyCode)) {
                $this->jsonReturnError(Constants::CODE_FAILED, 'code error');
            }
            $valid_time = isset($stickyCode['valid_time']) ? $stickyCode['valid_time'] : 0;
            $params['weight'] = isset($stickyCode['weight']) ? $stickyCode['weight'] : 0;
            $top = 1;
        }

        $result = ReleaseInfo::insertInfo($params, $valid_time, $top);
        if ($result) {
            //将置顶码失效
            StickyCode::delCode($params['code']);
            $this->jsonReturnSuccess(Constants::CODE_SUCCESS, 'success', $result);
        }
        $this->jsonReturnSuccess(Constants::CODE_FAILED, 'fail');
    }

    /**
     * @param time:（有效期 传1 表示1天（24小时） 7就是7七天有效）
     * @param phone:管理员的手机号
     * @param password:（密码）（手机号密码后台设置）
     */
    public function actionGetStick()
    {
        $params = $_GET ?: $_POST;
        if (empty($params['phone'])) {
            $this->jsonReturnError(Constants::CODE_FAILED, 'lose of parameter');
        }

        $phone = UserInfo::verifyPhone($params['phone']);
        if (!$phone) {
            $this->jsonReturnError(Constants::CODE_FAILED, 'phone invalid');
        }

        $pool = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';//定义一个验证码池，验证码由其中几个字符组成
        $word_length = 5;//验证码长度
        $code = '';//验证码
        for ($i = 0, $mt_rand_max = strlen($pool) - 1; $i < $word_length; $i++) {
            $code .= $pool[mt_rand(0, $mt_rand_max)];
        }
        $valid_time = 86400;//默认失效时间为1天
        if (!empty($params['time'])) {
            $valid_time = intval($params['time']) * 86400;
        }
        $result = StickyCode::createCode($code, 20, $valid_time);

        if ($result) {
            $this->jsonReturnSuccess(Constants::CODE_SUCCESS, 'success', $code);
        }
        $this->jsonReturnError(Constants::CODE_FAILED, 'fail');
    }

    /**
     * 分类
     */
    public function actionCategoryList()
    {
        $params = $_GET ?: $_POST;
        $params['page'] = empty($params['page']) ? self::PAGE : $params['page'];
        $params['pageSize'] = empty($params['pageSize']) ? self::PAGE_SIZE : $params['pageSize'];

        $list = Category::queryInfo($params);
        $count = Category::count($params);

        $result = [];
        $result['list'] = $list;
        $result['count'] = $count;
        $this->jsonReturnSuccess(Constants::CODE_SUCCESS, 'success', $result);
    }
}